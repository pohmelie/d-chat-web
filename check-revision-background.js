// Generated by CoffeeScript 1.6.3
(function() {
  var check_revision, load_files, make_unsigned, mpq_hash_codes;

  this.onmessage = function(event) {
    var file_name, seed_values, _ref,
      _this = this;
    _ref = JSON.parse(event.data), seed_values = _ref[0], file_name = _ref[1];
    postMessage(JSON.stringify({
      done: false,
      result: null,
      percents: 0
    }));
    return load_files(["d2xp/Game.dll", "d2xp/Bnclient.dll", "d2xp/D2Client.dll"], (function(d) {
      return check_revision(seed_values, file_name, d);
    }));
  };

  load_files = function(fnames, on_ready, d, i, prev) {
    var t;
    if (d == null) {
      d = [];
    }
    if (i == null) {
      i = 0;
    }
    if (prev == null) {
      prev = null;
    }
    if (prev !== null) {
      d.push(new Uint32Array(prev.response));
    }
    if (i < fnames.length) {
      t = new XMLHttpRequest();
      t.open("GET", fnames[i], true);
      t.responseType = "arraybuffer";
      t.onload = function() {
        return load_files(fnames, on_ready, d, i + 1, t);
      };
      return t.send();
    } else {
      return on_ready(d);
    }
  };

  mpq_hash_codes = [0xE7F4CB62, 0xF6A14FFC, 0xAA5504AF, 0x871FCDC2, 0x11BF6A18, 0xC57292E6, 0x7927D27E, 0x2FEC8733];

  make_unsigned = function(n) {
    return (n & 0xffffffff) >>> 0;
  };

  check_revision = function(formula, mpq, a) {
    var A, B, C, S, bin, body, exprs, i, init, k, mpq_hash, offset, step, step_count, tail, v, _i, _ref, _ref1;
    bin = new Uint32Array(a.reduce((function(x, y) {
      return x + y.length;
    }), 0));
    offset = 0;
    a.forEach(function(x) {
      bin.set(x, offset);
      return offset += x.length;
    });
    mpq_hash = mpq_hash_codes[Number(mpq[9])];
    exprs = formula.split(" ");
    init = exprs.slice(0, 3).join(";") + ";";
    body = "";
    for (i = _i = 4, _ref = 4 + Number(exprs[3]); 4 <= _ref ? _i < _ref : _i > _ref; i = 4 <= _ref ? ++_i : --_i) {
      _ref1 = exprs[i].split("="), k = _ref1[0], v = _ref1[1];
      body += "" + k + "=make_unsigned(" + v + ");";
    }
    A = B = C = S = i = 0;
    step_count = 100;
    step = Math.ceil(bin.length / step_count);
    body = "for(i = 0; i != bin.length; i++){S = bin[i];" + body;
    tail = "    if(i % step == 0)postMessage(\n        JSON.stringify({\n            done:false,\n            result:null,\n            percents:(i / step / step_count * 100)\n        })\n    );\n}";
    eval(init);
    A ^= mpq_hash;
    eval(body + tail);
    return postMessage(JSON.stringify({
      done: true,
      result: C,
      percents: 100
    }));
  };

}).call(this);
